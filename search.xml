<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[RecyclerView 知识点]]></title>
      <url>/2017/09/24/RecyclerView%20%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>好久没写博客了，到新公司差不多一个月了，之前做Android TV 开发，现在开始做手机端了，写手机端App 或许是一个很久的执念吧。<br>就最近的页面需求，好好研究了一下ViewGroup，RecyclerView 的绘制，这里打算立个flag，记一下自己踩的坑。<br>先立个自己的思路：<br><strong><em>这里再提议嘴，一般我们处理一个view的UI交互，动效，最好来封装控件，从我们的mvp，mvvm等等模式里抽离动画，交互的具体代码！！！！！！！</em></strong></p>
<h2 id="最近的一个需求"><a href="#最近的一个需求" class="headerlink" title="最近的一个需求"></a>最近的一个需求</h2><p>最近碰到一个需求，如视频所示：<br><a id="more"></a></p>
<video width="494" height="878" controls><br>    <source src="https://raw.githubusercontent.com/JarvisGG/JarvisBlog/master/source/video/demo.mp4"><br></video>

<p>如图所示动画过程：<br>1.上下滚动是，底图是跟着浮动的（item从头到尾滑动recycerview的高度，但是图片需要滚动全屏距离）.<br>2.点击item，列表展开.<br>3.底图放大到全屏.</p>
<h2 id="涉及到的知识点"><a href="#涉及到的知识点" class="headerlink" title="涉及到的知识点"></a>涉及到的知识点</h2><h3 id="itemDecoration-是什么"><a href="#itemDecoration-是什么" class="headerlink" title="itemDecoration 是什么"></a>itemDecoration 是什么</h3><p>这里我们先看看源码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemDecoration</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas c, RecyclerView parent, State state)</span> </span>&#123;</div><div class="line">        onDraw(c, parent);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Deprecated</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas c, RecyclerView parent)</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDrawOver</span><span class="params">(Canvas c, RecyclerView parent, State state)</span> </span>&#123;</div><div class="line">        onDrawOver(c, parent);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Deprecated</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDrawOver</span><span class="params">(Canvas c, RecyclerView parent)</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Deprecated</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getItemOffsets</span><span class="params">(Rect outRect, <span class="keyword">int</span> itemPosition, RecyclerView parent)</span> </span>&#123;</div><div class="line">        outRect.set(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getItemOffsets</span><span class="params">(Rect outRect, View view, RecyclerView parent, State state)</span> </span>&#123;</div><div class="line">        getItemOffsets(outRect, ((LayoutParams) view.getLayoutParams()).getViewLayoutPosition(),</div><div class="line">                parent);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里我们看到是直接在<strong>recyclerview的画布上用Canvas</strong>画出来的，这地方很重要。</p>
<h3 id="ItemView-的绘制"><a href="#ItemView-的绘制" class="headerlink" title="ItemView 的绘制"></a>ItemView 的绘制</h3><p>我们可以看源码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">getChildDrawingOrder</span><span class="params">(<span class="keyword">int</span> childCount, <span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.getChildDrawingOrder(childCount, i);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以通过控制这个方法来决定recyclerview itemview的绘制顺序<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">dispatchDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.dispatchDraw(canvas);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里是具体执行recyclerview 绘制itemview的地方<br>之前我在做recyclerview itemview滑到屏幕中间的时候放大，由于itemview的绘制顺序，放大的itemview会被后面的itemview盖住，这里我通过复写这个方法来完成。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onChildAttachedToWindow</span><span class="params">(View child)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.post(() -&gt; &#123;</div><div class="line">        <span class="keyword">if</span> (child <span class="keyword">instanceof</span> ContainerCardView) &#123;</div><div class="line">            mContainerCardView.put((ContainerCardView) child, TopRecyclerView.<span class="keyword">this</span>.getChildAdapterPosition(child));</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">super</span>.onChildAttachedToWindow(child);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">dispatchDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">    <span class="comment">// 第一遍绘制所有view</span></div><div class="line">    <span class="keyword">super</span>.dispatchDraw(canvas);</div><div class="line">    <span class="comment">// 开始绘制特定view，保证层级最高</span></div><div class="line">    List&lt;ContainerCardView&gt; crashChildViews = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    crashChildViews.addAll(mContainerCardView.keySet());</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; crashChildViews.size(); i++) &#123;</div><div class="line">        <span class="keyword">super</span>.drawChild(canvas, crashChildViews.get(i), <span class="keyword">this</span>.getDrawingTime());</div><div class="line">        crashChildViews.get(i).setTag(<span class="string">"draw"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>itemview的layout<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLayoutChildren</span><span class="params">(Recycler recycler, State state)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onLayoutChildren(recycler, state);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="recyclerview（ViewGroup）-以及-itemview-重绘"><a href="#recyclerview（ViewGroup）-以及-itemview-重绘" class="headerlink" title="recyclerview（ViewGroup） 以及 itemview 重绘"></a>recyclerview（ViewGroup） 以及 itemview 重绘</h3><p>对于重绘我们应该多做注意：<br>1.频繁重绘，会导致vsync信号间隔，gpu来不及绘制framequeue里面的frames，导致丢帧。<br>2.itemview 重绘会导致Android TV焦点丢失。<br>3.itemview 重绘，假如外层的viewgroup是wrapcontent，将会导致递归到根节点（宽高给死的viewgroup）的所有view重绘。假如其中有layout位置动画，将会导致动画失效。<br>4.避免子view重绘制导致上层跟着重绘制，最简单的方式是给定上层viewgroup固定的框高，任你子view变化莫测，我岿然不动，这样就可以保存一些layout的动画状态。</p>
<h2 id="具体的实现方式"><a href="#具体的实现方式" class="headerlink" title="具体的实现方式"></a>具体的实现方式</h2><h3 id="拆分动画"><a href="#拆分动画" class="headerlink" title="拆分动画"></a>拆分动画</h3><h4 id="recyclerview-展开，收缩动画："><a href="#recyclerview-展开，收缩动画：" class="headerlink" title="recyclerview 展开，收缩动画："></a>recyclerview 展开，收缩动画：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * 展开动画</div><div class="line">    * <span class="doctag">@param</span> childView</div><div class="line">    * <span class="doctag">@param</span> selectedPosition</div><div class="line">    */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">excuteExtendAnim</span><span class="params">(View childView, <span class="keyword">int</span> selectedPosition)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.mTargetView = childView;</div><div class="line">    <span class="keyword">this</span>.mSelectPosition = selectedPosition;</div><div class="line">    </div><div class="line">    <span class="keyword">int</span> screenPosition[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</div><div class="line">    childView.getLocationOnScreen(screenPosition);</div><div class="line"></div><div class="line">    List&lt;Animator&gt; excuteChildAnim = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    List&lt;View&gt; excuteChilds = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; getChildCount(); i++) &#123;</div><div class="line">        View child = <span class="keyword">this</span>.getChildAt(i);</div><div class="line">        <span class="keyword">int</span> position = getChildAdapterPosition(child);</div><div class="line">        <span class="keyword">if</span> (position &lt; selectedPosition) &#123;</div><div class="line">            excuteChilds.add(child);</div><div class="line">            <span class="keyword">final</span> ObjectAnimator objectAnimator = ObjectAnimator.ofFloat(child, View.TRANSLATION_Y, <span class="number">0</span>, -screenPosition[<span class="number">1</span>] + mParentScreenPosition[<span class="number">1</span>]);</div><div class="line">            objectAnimator.setDuration(mDuration);</div><div class="line">            excuteChildAnim.add(objectAnimator);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (position &gt; selectedPosition) &#123;</div><div class="line">            excuteChilds.add(child);</div><div class="line">            <span class="keyword">final</span> ObjectAnimator objectAnimator = ObjectAnimator.ofFloat(child, View.TRANSLATION_Y, <span class="number">0</span>, Utils.getScreenSizeY(mContext) - screenPosition[<span class="number">1</span>] - childView.getHeight());</div><div class="line">            objectAnimator.setDuration(mDuration);</div><div class="line">            excuteChildAnim.add(objectAnimator);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    excuteItemAnim(excuteChildAnim, <span class="keyword">false</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">    * 收缩动画</div><div class="line">    */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">excuteShrinkAnim</span><span class="params">()</span> </span>&#123;</div><div class="line">    List&lt;Animator&gt; excuteChildAnim = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; getChildCount(); i++) &#123;</div><div class="line">        View child = <span class="keyword">this</span>.getChildAt(i);</div><div class="line">        <span class="keyword">int</span> position = getChildAdapterPosition(child);</div><div class="line">        <span class="keyword">if</span> (position != mSelectPosition) &#123;</div><div class="line">            <span class="keyword">float</span> startY = child.getTranslationY();</div><div class="line">            <span class="keyword">final</span> ObjectAnimator objectAnimator = ObjectAnimator.ofFloat(child, View.TRANSLATION_Y, startY, <span class="number">0</span>);</div><div class="line">            objectAnimator.setDuration(<span class="number">200</span>);</div><div class="line">            excuteChildAnim.add(objectAnimator);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    excuteItemAnim(excuteChildAnim, <span class="keyword">true</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">excuteItemAnim</span><span class="params">(List&lt;Animator&gt; excuteChildAnim, <span class="keyword">boolean</span> isShrink)</span> </span>&#123;</div><div class="line"></div><div class="line">    AnimatorSet set = <span class="keyword">new</span> AnimatorSet();</div><div class="line">    set.playTogether(excuteChildAnim);</div><div class="line">    set.setInterpolator(<span class="keyword">new</span> DecelerateInterpolator());</div><div class="line">    set.start();</div><div class="line">    notifyAnimStateStart(<span class="keyword">null</span>, !isShrink);</div><div class="line">    set.addListener(<span class="keyword">new</span> Animator.AnimatorListener() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationStart</span><span class="params">(Animator animator)</span> </span>&#123;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationEnd</span><span class="params">(Animator animator)</span> </span>&#123;</div><div class="line">            notifyAnimStateEnd(animator, !isShrink);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationCancel</span><span class="params">(Animator animator)</span> </span>&#123;</div><div class="line">            notifyAnimStateCancel(animator, !isShrink);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationRepeat</span><span class="params">(Animator animator)</span> </span>&#123;</div><div class="line">            notifyAnimStateRepeat(animator, !isShrink);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="recyclerview-滚动，itemview-的imageview-的移动动画："><a href="#recyclerview-滚动，itemview-的imageview-的移动动画：" class="headerlink" title="recyclerview 滚动，itemview 的imageview 的移动动画："></a>recyclerview 滚动，itemview 的imageview 的移动动画：</h4><p>recyclerview：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 定义接口</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ScrollStateCallback</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onScrollStateChanged</span><span class="params">(RecyclerView recyclerView, <span class="keyword">int</span> newState)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onScrolled</span><span class="params">(<span class="keyword">int</span> headerHeight, <span class="keyword">int</span> totalHeight, <span class="keyword">int</span> dx, <span class="keyword">int</span> dy)</span></span>;</div><div class="line">&#125;</div><div class="line">／**</div><div class="line"> * 将实现这个接口的cardview 添加到集合</div><div class="line"> *／</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onChildAttachedToWindow</span><span class="params">(View child)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onChildAttachedToWindow(child);</div><div class="line">    <span class="keyword">if</span> (child <span class="keyword">instanceof</span> ScrollStateCallback) &#123;</div><div class="line">        mScrollStateCallback.add((ScrollStateCallback) child);</div><div class="line">    &#125;</div><div class="line">    initChildOperator(child);</div><div class="line">&#125;</div><div class="line">／**</div><div class="line"> * 将实现这个接口的cardview 移除集合</div><div class="line"> *／</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onChildDetachedFromWindow</span><span class="params">(View child)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onChildDetachedFromWindow(child);</div><div class="line">    <span class="keyword">if</span> (child <span class="keyword">instanceof</span> ScrollStateCallback) &#123;</div><div class="line">        mScrollStateCallback.remove(child);</div><div class="line">    &#125;</div><div class="line">    detachChildOperator(child);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initView</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.mContext = context;</div><div class="line">    <span class="keyword">this</span>.addOnScrollListener(<span class="keyword">new</span> OnScrollListener() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onScrollStateChanged</span><span class="params">(RecyclerView recyclerView, <span class="keyword">int</span> newState)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>.onScrollStateChanged(recyclerView, newState);</div><div class="line">            notifyScrollStateChanged(recyclerView, newState); <span class="comment">// 开始调用方法</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onScrolled</span><span class="params">(RecyclerView recyclerView, <span class="keyword">int</span> dx, <span class="keyword">int</span> dy)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>.onScrolled(recyclerView, dx, dy);</div><div class="line">            notifyScrolled(recyclerView, dx, dy);<span class="comment">// 开始调用Scroll方法</span></div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">notifyScrolled</span><span class="params">(RecyclerView recyclerView, <span class="keyword">int</span> dx, <span class="keyword">int</span> dy)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (ScrollStateCallback callback : mScrollStateCallback) &#123;</div><div class="line">        callback.onScrolled(mHeaderHeight, mTotalHeight, dx, dy);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">notifyScrollStateChanged</span><span class="params">(RecyclerView recyclerView, <span class="keyword">int</span> newState)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (ScrollStateCallback callback : mScrollStateCallback) &#123;</div><div class="line">        callback.onScrollStateChanged(recyclerView, newState);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>cardview 继承 ScrollStateCallback:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onScrollStateChanged</span><span class="params">(RecyclerView recyclerView, <span class="keyword">int</span> newState)</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onScrolled</span><span class="params">(<span class="keyword">int</span> mHeaderHeight, <span class="keyword">int</span> mTotalHeight, <span class="keyword">int</span> dx, <span class="keyword">int</span> dy)</span> </span>&#123;</div><div class="line">    excuteAdCardAnim(mHeaderHeight, mTotalHeight, dx, dy);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 数学公式推倒</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">excuteAdCardAnim</span><span class="params">(<span class="keyword">int</span> mHeaderHeight, <span class="keyword">int</span> mTotalHeight, <span class="keyword">int</span> dx, <span class="keyword">int</span> dy)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> topOffset = <span class="keyword">this</span>.getTop();</div><div class="line">    <span class="keyword">int</span> a = topOffset + mHeaderHeight;</div><div class="line">    <span class="keyword">int</span> b = topOffset * mTotalHeight;</div><div class="line">    <span class="keyword">int</span> c = mTotalHeight - mHeaderHeight;</div><div class="line">    <span class="keyword">int</span> top = a - b / c - mHeaderHeight;</div><div class="line">    <span class="keyword">if</span> (top &gt; <span class="number">0</span>) &#123;</div><div class="line">        top = topOffset;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 这里要注意我刚才提出的重回问题，不然这块儿的动画会因为重绘制失效</span></div><div class="line">    <span class="keyword">this</span>.mImageView.dragPosition(</div><div class="line">            mImageView.getLeft(),</div><div class="line">            top - topOffset,</div><div class="line">            mImageView.getRight(),</div><div class="line">            top + mImageView.getHeight() - topOffset);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="关键的动画已经基本完成，现在存在一个问题，我上访的titlebar也要动画，消失，这里就不列出代码了，很简单，问题是我的recyclerview-的目标itemview-需要也保持移动来保证跟后面的imageview保持一致："><a href="#关键的动画已经基本完成，现在存在一个问题，我上访的titlebar也要动画，消失，这里就不列出代码了，很简单，问题是我的recyclerview-的目标itemview-需要也保持移动来保证跟后面的imageview保持一致：" class="headerlink" title="关键的动画已经基本完成，现在存在一个问题，我上访的titlebar也要动画，消失，这里就不列出代码了，很简单，问题是我的recyclerview 的目标itemview 需要也保持移动来保证跟后面的imageview保持一致："></a>关键的动画已经基本完成，现在存在一个问题，我上访的titlebar也要动画，消失，这里就不列出代码了，很简单，问题是我的recyclerview 的目标itemview 需要也保持移动来保证跟后面的imageview保持一致：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationStart</span><span class="params">(Ad.Creative creative, <span class="keyword">boolean</span> isShrink)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.mCreative = creative;</div><div class="line">    mZHFloatAdFullView.setCreative(mCreative);</div><div class="line">    AnimatorSet set = <span class="keyword">new</span> AnimatorSet();</div><div class="line">    List&lt;Animator&gt; animatorList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (isShrink) &#123;</div><div class="line"></div><div class="line">        ValueAnimator downAnim = ValueAnimator.ofInt(<span class="number">0</span>, mLastTopHeight);</div><div class="line">        downAnim.addUpdateListener(<span class="keyword">new</span> AdLogoViewAnimatorUpdateListener(mLastTopHeight, mLastItemHeight));</div><div class="line">        animatorList.add(downAnim);</div><div class="line"></div><div class="line">        ObjectAnimator parentAnim = ObjectAnimator.ofFloat(<span class="keyword">this</span>, View.TRANSLATION_Y, <span class="number">0</span>);</div><div class="line">        animatorList.add(parentAnim);</div><div class="line"></div><div class="line">        ZHFloatAdCardView cardView = mZHFloatAdRecyclerView.getCurrentClickView();</div><div class="line">        ObjectAnimator clickAnim = ObjectAnimator.ofFloat(cardView, View.TRANSLATION_Y, <span class="number">0</span>);</div><div class="line">        animatorList.add(clickAnim);</div><div class="line"></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">int</span> currentTop = mZHFloatAdRecyclerView.getCurrentAnimItemLogoViewTop();</div><div class="line">        mLastTopHeight = currentTop;</div><div class="line">        mLastItemHeight = mZHFloatAdRecyclerView.getCurrentAnimItemMargetTop();</div><div class="line"></div><div class="line">        ValueAnimator upAnim = ValueAnimator.ofInt(currentTop, <span class="number">0</span>);</div><div class="line">        upAnim.addUpdateListener(<span class="keyword">new</span> AdLogoViewAnimatorUpdateListener(mLastTopHeight, mLastItemHeight));</div><div class="line">        animatorList.add(upAnim);</div><div class="line"></div><div class="line">        ObjectAnimator parentAnim = ObjectAnimator.ofFloat(<span class="keyword">this</span>, View.TRANSLATION_Y,  -mHeaderHeight);</div><div class="line">        animatorList.add(parentAnim);</div><div class="line"></div><div class="line">        ZHFloatAdCardView cardView = mZHFloatAdRecyclerView.getCurrentClickView();</div><div class="line">        ObjectAnimator clickAnim = ObjectAnimator.ofFloat(cardView, View.TRANSLATION_Y, -currentTop);</div><div class="line">        animatorList.add(clickAnim);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    set.playTogether(animatorList);</div><div class="line">    set.setInterpolator(<span class="keyword">new</span> AccelerateDecelerateInterpolator());</div><div class="line">    set.addListener(<span class="keyword">new</span> Animator.AnimatorListener() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationStart</span><span class="params">(Animator animator)</span> </span>&#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationEnd</span><span class="params">(Animator animator)</span> </span>&#123;</div><div class="line">            Log.e(<span class="string">"topOffset ------&gt; "</span>, ZHFloatAdFloatView.<span class="keyword">this</span>.getTop()+<span class="string">""</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationCancel</span><span class="params">(Animator animator)</span> </span>&#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationRepeat</span><span class="params">(Animator animator)</span> </span>&#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    set.setDuration(sAdNormalAnimDuration);</div><div class="line">    set.start();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AdLogoViewAnimatorUpdateListener</span> <span class="keyword">implements</span> <span class="title">ValueAnimator</span>.<span class="title">AnimatorUpdateListener</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> totalTop;</div><div class="line">    <span class="keyword">int</span> itemTop;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AdLogoViewAnimatorUpdateListener</span><span class="params">(<span class="keyword">int</span> totalTop, <span class="keyword">int</span> itemTop)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.totalTop = totalTop;</div><div class="line">        <span class="keyword">this</span>.itemTop = itemTop;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationUpdate</span><span class="params">(ValueAnimator valueAnimator)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> top = (<span class="keyword">int</span>)valueAnimator.getAnimatedValue();</div><div class="line">        <span class="keyword">if</span> (mZHFloatAdRecyclerView.getCurrentClickAdCardType() == ZHFloatAdCardView.ADCardViewType.FLOAT) &#123;</div><div class="line">            mAdLogoView.dragPosition(</div><div class="line">                    mAdLogoView.getLeft(),</div><div class="line">                    top,</div><div class="line">                    mAdLogoView.getRight(),</div><div class="line">                    top + mAdLogoView.getHeight());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="手势控制"><a href="#手势控制" class="headerlink" title="手势控制"></a>手势控制</h3><p>展开第二级页面，我们要监控手势，往上滑，就控制滑动到webview，在webview状态想上滑，就滑到顶部，漏出imageview。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onInterceptTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (isOvering) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (mCurrent == <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (mWebView.getScrollY() == <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">switch</span> (ev.getAction()) &#123;</div><div class="line">            <span class="keyword">case</span> ACTION_DOWN:</div><div class="line">                lastY = y = ev.getY();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> ACTION_MOVE:</div><div class="line">                y = ev.getY();</div><div class="line">                deltaY = (<span class="keyword">int</span>) (lastY - y);</div><div class="line">                <span class="keyword">if</span> (deltaY &lt; -mTouchThreshold) &#123;</div><div class="line">                    isOvering = <span class="keyword">true</span>;</div><div class="line">                    mZHFloatAdFloatView.excuteScrollAnim(mContext, <span class="keyword">this</span>, <span class="keyword">false</span>,</div><div class="line">                            () -&gt; &#123;</div><div class="line">                        isOvering = <span class="keyword">false</span>;</div><div class="line">                        setCurrent(<span class="number">0</span>);</div><div class="line">                    &#125;);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> ACTION_UP:</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.onInterceptTouchEvent(ev);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (isOvering) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (mCurrent == <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">switch</span> (event.getAction()) &#123;</div><div class="line">            <span class="keyword">case</span> ACTION_DOWN:</div><div class="line">                lastY = y = event.getY();</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            <span class="keyword">case</span> ACTION_MOVE:</div><div class="line">                y = event.getY();</div><div class="line">                deltaY = (<span class="keyword">int</span>) (lastY - y);</div><div class="line">                <span class="keyword">if</span> (deltaY &gt; mTouchThreshold) &#123;</div><div class="line">                    isOvering = <span class="keyword">true</span>;</div><div class="line">                    mZHFloatAdFloatView.excuteScrollAnim(mContext, <span class="keyword">this</span>, <span class="keyword">true</span>,</div><div class="line">                            () -&gt; &#123;</div><div class="line">                                isOvering = <span class="keyword">false</span>;</div><div class="line">                                setCurrent(<span class="number">1</span>);</div><div class="line">                            &#125;);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> ACTION_UP:</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.onTouchEvent(event);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里Touch事件的传递方式就不说了。自行google。</p>
<h3 id="webview的基本配置"><a href="#webview的基本配置" class="headerlink" title="webview的基本配置"></a>webview的基本配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initWebSettings</span><span class="params">()</span> </span>&#123;</div><div class="line">    WebSettings settings = mWebView.getSettings();</div><div class="line">    <span class="comment">//支持JS</span></div><div class="line">    settings.setJavaScriptEnabled(<span class="keyword">true</span>);</div><div class="line">    <span class="comment">//支持插件</span></div><div class="line">    settings.setPluginState(WebSettings.PluginState.ON);</div><div class="line">    <span class="comment">//设置适应屏幕</span></div><div class="line">    settings.setUseWideViewPort(<span class="keyword">true</span>);</div><div class="line">    settings.setLoadWithOverviewMode(<span class="keyword">true</span>);</div><div class="line">    <span class="comment">//支持缩放</span></div><div class="line">    settings.setSupportZoom(<span class="keyword">false</span>);</div><div class="line">    <span class="comment">//隐藏原生的缩放控件</span></div><div class="line">    settings.setDisplayZoomControls(<span class="keyword">false</span>);</div><div class="line">    <span class="comment">//支持内容重新布局</span></div><div class="line">    settings.setLayoutAlgorithm(WebSettings.LayoutAlgorithm.NORMAL);</div><div class="line">    settings.supportMultipleWindows();</div><div class="line">    settings.setSupportMultipleWindows(<span class="keyword">true</span>);</div><div class="line">    <span class="comment">//设置缓存模式</span></div><div class="line">    settings.setDomStorageEnabled(<span class="keyword">true</span>);</div><div class="line">    settings.setDatabaseEnabled(<span class="keyword">true</span>);</div><div class="line">    settings.setCacheMode(WebSettings.LOAD_DEFAULT);</div><div class="line">    settings.setAppCacheEnabled(<span class="keyword">true</span>);</div><div class="line">    settings.setAppCachePath(mWebView.getContext().getCacheDir().getAbsolutePath());</div><div class="line"></div><div class="line">    <span class="comment">//设置可访问文件</span></div><div class="line">    settings.setAllowFileAccess(<span class="keyword">true</span>);</div><div class="line">    <span class="comment">//支持自动加载图片</span></div><div class="line">    <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) &#123;</div><div class="line">        settings.setLoadsImagesAutomatically(<span class="keyword">true</span>);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        settings.setLoadsImagesAutomatically(<span class="keyword">false</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//设置编码格式</span></div><div class="line">    settings.setDefaultTextEncodingName(<span class="string">"UTF-8"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initWebViewClient</span><span class="params">()</span> </span>&#123;</div><div class="line">    mWebView.setWebViewClient(<span class="keyword">new</span> WebViewClient() &#123;</div><div class="line"></div><div class="line">        <span class="comment">//页面开始加载时</span></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageStarted</span><span class="params">(WebView view, String url, Bitmap favicon)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>.onPageStarted(view, url, favicon);</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="comment">//页面完成加载时</span></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageFinished</span><span class="params">(WebView view, String url)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>.onPageFinished(view, url);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//是否在WebView内加载新页面</span></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldOverrideUrlLoading</span><span class="params">(WebView view, WebResourceRequest request)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.shouldOverrideUrlLoading(view, request);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldOverrideUrlLoading</span><span class="params">(WebView view, String url)</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (url.contains(HTTP) || url.contains(HTTPS)) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">super</span>.shouldOverrideUrlLoading(view, url);</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (UriHandlerDispatcher.handleUri(getContext(), url)) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">super</span>.shouldOverrideUrlLoading(view, url);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//网络错误时回调的方法</span></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceivedError</span><span class="params">(WebView view, WebResourceRequest request, WebResourceError error)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>.onReceivedError(view, request, error);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceivedHttpError</span><span class="params">(WebView view, WebResourceRequest request, WebResourceResponse errorResponse)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>.onReceivedHttpError(view, request, errorResponse);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doUpdateVisitedHistory</span><span class="params">(WebView view, String url, <span class="keyword">boolean</span> isReload)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>.doUpdateVisitedHistory(view, url, isReload);</div><div class="line">            mWebView.clearHistory(); <span class="comment">// 不保存历史，不允许goBack</span></div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initWebChromeClient</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    mWebView.setWebChromeClient(<span class="keyword">new</span> WebChromeClient() &#123;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceivedTitle</span><span class="params">(WebView view, String title)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>.onReceivedTitle(view, title);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onProgressChanged</span><span class="params">(WebView view, <span class="keyword">int</span> newProgress)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>.onProgressChanged(view, newProgress);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> Bitmap <span class="title">getDefaultVideoPoster</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.getDefaultVideoPoster();</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>之前走了不少坑。这个是PlanB+，之前的心路历程PlanA -&gt; PlanB -&gt; PlanC -&gt; PlanB+。😂<br>好在看了不少源码，感觉收获挺大的。后续打算还是继续结合具体需求，整理记录知识点儿。</p>
]]></content>
      
        
        <tags>
            
            <tag> Android View </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android TV 焦点探索]]></title>
      <url>/2017/07/20/Android%20TV%20%E7%84%A6%E7%82%B9%E4%B8%A2%E5%A4%B1%E7%9A%84%E7%BD%AA%E9%AD%81%E7%A5%B8%E9%A6%96/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>毕业从事Android TV 开发一年了，这一年萦绕着我，挥之不去的就是焦点逻辑，TV 区别于手机的UI交互区别，应该就是focus事件与touch事件了，而国内关于Android TV的盘子还不如手机端踩得多，那么今天打算总结一下焦点的几个疑惑。这里我会分焦点搜索，焦点丢失来谈谈。踩踩盘子。<br><a id="more"></a></p>
<h2 id="焦点搜索"><a href="#焦点搜索" class="headerlink" title="焦点搜索"></a>焦点搜索</h2><p>这块儿Android源码很有意思，谷歌爹们真的牛啊，好了，当我们用遥控器按上下左右键的时候，我们会调用focusSearch，我们结合源码看一下.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> View <span class="title">focusSearch</span><span class="params">(@FocusRealDirection <span class="keyword">int</span> direction)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (mParent != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">return</span> mParent.focusSearch(<span class="keyword">this</span>, direction);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>focus 当前获得焦点的View，direction当前按键事件方向，我们可以看到这里View会将焦点上抛给Parent，接个我们进去看。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> View <span class="title">focusSearch</span><span class="params">(View focused, <span class="keyword">int</span> direction)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (isRootNamespace()) &#123;</div><div class="line">        <span class="comment">// root namespace means we should consider ourselves the top of the</span></div><div class="line">        <span class="comment">// tree for focus searching; otherwise we could be focus searching</span></div><div class="line">        <span class="comment">// into other tabs.  see LocalActivityManager and TabHost for more info</span></div><div class="line">        <span class="keyword">return</span> FocusFinder.getInstance().findNextFocus(<span class="keyword">this</span>, focused, direction);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mParent != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">return</span> mParent.focusSearch(focused, direction);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里我们看到有一个是否是根空间的判断，倘若当前</p>
]]></content>
      
        
        <tags>
            
            <tag> Android 源码 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[RxBus 的初步探索]]></title>
      <url>/2017/06/20/RxBus%20%E7%9A%84%E5%88%9D%E6%AD%A5%E6%8E%A2%E7%B4%A2/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>5月份项目上线了，之后就在优化项目结构，减少依赖。之前项目一直用的EventBus来作为项目事件流的框架，这两天偶然看到RxBus这个东西，基于RxJava和RxAndroid，考虑到自身的业务需求，由于本身用EventBus的功能比较单一，而发现RxBus足以实现我现有的业务，所以决定踩踩坑。<br><a id="more"></a></p>
<h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RxBus</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> RxBus mInstance;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Subject mBus;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RxBus</span><span class="params">()</span> </span>&#123;</div><div class="line">        mBus = <span class="keyword">new</span> SerializedSubject&lt;&gt;(PublishSubject.create());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RxBus <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mInstance == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">synchronized</span> (RxBus.class) &#123;</div><div class="line">                <span class="keyword">if</span> (mInstance == <span class="keyword">null</span>) &#123;</div><div class="line">                    mInstance = <span class="keyword">new</span> RxBus();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> mInstance;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">post</span><span class="params">(Object object)</span> </span>&#123;</div><div class="line">        mBus.onNext(object);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">Observable&lt;T&gt; <span class="title">toObserverable</span><span class="params">(Class&lt;T&gt; eventType)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mBus.ofType(eventType);</div><div class="line"><span class="comment">//        return mBus.filter(eventType::isInstance)</span></div><div class="line"><span class="comment">//                .cast(eventType);</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>目前只是消息的注册，发送。</p>
<h4 id="SerializedSubject"><a href="#SerializedSubject" class="headerlink" title="SerializedSubject"></a>SerializedSubject</h4><p>SerializedSubject 特征是线程安全<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">SerializedSubject</span><span class="params">(<span class="keyword">final</span> Subject&lt;T, R&gt; actual)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>(<span class="keyword">new</span> OnSubscribe&lt;R&gt;() &#123;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> R&gt; child)</span> </span>&#123;</div><div class="line">            actual.unsafeSubscribe(child);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">this</span>.actual = actual;</div><div class="line">    <span class="keyword">this</span>.observer = <span class="keyword">new</span> SerializedObserver&lt;T&gt;(actual);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里有个小细节，actual 是当前的数据链，这里通过SerializedObserver将数据链做一个转换，类似于map。<br>下面我们看SerializedObserver<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(T t)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (terminated) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (terminated) &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (emitting) &#123;</div><div class="line">            FastList list = queue;</div><div class="line">            <span class="keyword">if</span> (list == <span class="keyword">null</span>) &#123;</div><div class="line">                list = <span class="keyword">new</span> FastList();</div><div class="line">                queue = list;</div><div class="line">            &#125;</div><div class="line">            list.add(NotificationLite.next(t));</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        emitting = <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        actual.onNext(t);</div><div class="line">    &#125; <span class="keyword">catch</span> (Throwable e) &#123;</div><div class="line">        terminated = <span class="keyword">true</span>;</div><div class="line">        Exceptions.throwOrReport(e, actual, t);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (;;) &#123;</div><div class="line">        FastList list;</div><div class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">            list = queue;</div><div class="line">            <span class="keyword">if</span> (list == <span class="keyword">null</span>) &#123;</div><div class="line">                emitting = <span class="keyword">false</span>;</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">            queue = <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (Object o : list.array) &#123;</div><div class="line">            <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">if</span> (NotificationLite.accept(actual, o)) &#123;</div><div class="line">                    terminated = <span class="keyword">true</span>;</div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">catch</span> (Throwable e) &#123;</div><div class="line">                terminated = <span class="keyword">true</span>;</div><div class="line">                Exceptions.throwIfFatal(e);</div><div class="line">                actual.onError(OnErrorThrowable.addValueAsLastCause(e, t));</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里丑抽出onNext，我们发现synchronized线程锁，证明当前是线程安全的，当多个线程再要执行onNext，这里线程安全，排队线程会加入queue，然后依次执行。onError，onComplete同理。</p>
<h4 id="PublishSubject"><a href="#PublishSubject" class="headerlink" title="PublishSubject"></a>PublishSubject</h4><p>与普通的Subject不同，在订阅时并不立即触发订阅事件，而是允许我们在任意时刻手动调用onNext(),onError(),onCompleted来触发事件。<br>可以看到PublishSubject与普通的Subject最大的不同就是其可以先订阅事件，然后在某一时刻手动调用方法来触发事件。<br>demo：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">PublishSubject&lt;String&gt; publishSubject = PublishSubject.create();</div><div class="line">publishSubject.subscribe(<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">            <span class="comment">// TODO</span></div><div class="line">        &#125;</div><div class="line">&#125;);</div><div class="line">publishSubject.onNext(result);</div></pre></td></tr></table></figure></p>
<p>我们可以根据我们的业务需求先对Subject进行订阅，然后再默一时刻触发我们的onNext。</p>
<h2 id="原理总结"><a href="#原理总结" class="headerlink" title="原理总结"></a>原理总结</h2><p>这里的publishSubject就是在我们发出通知的时候才会去onNext，而我们的onNext是线程安全的，当并发访问的时候，可以依次执行onNext，这里我们要用到ofType这个操作符，用来过滤TargetEvent.class的Observable来实现“发送端”与“接收端”的约束。</p>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>简单的使用方法</p>
<h3 id="消息发送"><a href="#消息发送" class="headerlink" title="消息发送"></a>消息发送</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">RxBus.getInstance().post(event);</div></pre></td></tr></table></figure>
<h3 id="消息注册，取消注册"><a href="#消息注册，取消注册" class="headerlink" title="消息注册，取消注册"></a>消息注册，取消注册</h3><p>这里就不以Activity，Fragment做对照了，基本用法都一样，风向一个View AttachToWindow,DetachFromWindow 的方式<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onAttachedToWindow</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onAttachedToWindow();</div><div class="line">    mSubscription = RxBus.getInstance().toObserverable(IndexLeftBtnGetFocusEvent.class)</div><div class="line">            .compose(RxSchedulers.threadSwitchSchedulers())</div><div class="line">            .subscribe(event -&gt; &#123;</div><div class="line">                <span class="comment">// TODO 业务逻辑</span></div><div class="line">            &#125;);</div><div class="line"><span class="comment">//        EventBus.getDefault().register(this);</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDetachedFromWindow</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onDetachedFromWindow();</div><div class="line">    <span class="keyword">if</span> (mSubscription.isUnsubscribed()) &#123;</div><div class="line">        mSubscription.unsubscribe();</div><div class="line">    &#125;</div><div class="line"><span class="comment">//        EventBus.getDefault().unregister(this);</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>这里我只是先用一个小demo来学习一下这里的代码设计，后期会对我们的RxBus优化，比如添加bind，unbind生命周期的相关逻辑。</p>
]]></content>
      
        
        <tags>
            
            <tag> RxBus </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[GreenDao 数据库升级数据迁移]]></title>
      <url>/2017/04/22/GreenDao%20%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8D%87%E7%BA%A7%E6%95%B0%E6%8D%AE%E8%BF%81%E7%A7%BB/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近需要解决GreenDao 在迭代升级数据库时需要做数据库迁移。经过查资料解决了，立个flag备忘。。</p>
<h2 id="问题切入点"><a href="#问题切入点" class="headerlink" title="问题切入点"></a>问题切入点</h2><p>在GreenDao apt自动生成的DaoMaster代码<br><a id="more"></a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** WARNING: Drops all table on Upgrade! Use only during development. */</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DevOpenHelper</span> <span class="keyword">extends</span> <span class="title">OpenHelper</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DevOpenHelper</span><span class="params">(Context context, String name, CursorFactory factory)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, name, factory);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onUpgrade</span><span class="params">(SQLiteDatabase db, <span class="keyword">int</span> oldVersion, <span class="keyword">int</span> newVersion)</span> </span>&#123;</div><div class="line">        Log.i(<span class="string">"greenDAO"</span>, <span class="string">"Upgrading schema from version "</span> + oldVersion + <span class="string">" to "</span> + newVersion + <span class="string">" by dropping all tables"</span>);</div><div class="line">        dropAllTables(db, <span class="keyword">true</span>);</div><div class="line">        onCreate(db);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>GreenDao 在根据数据库版本号升级的时候会执行DevOpenHelper的onUpgrade方法，我们依次看到dropAllTables，onCreate，先清除所有的数据表，然后重建，这样我们上一个版本是数据表里的老数据就被drop掉了。所以我们的切入点就是着这里。</p>
<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>这里我们的基本思路是：<br>1.对老的数据表重新命名，作为临时数据表<br>2.建立新的数据表<br>3.将临时数据表的所有数据迁移到新的数据表<br>4.删除临时数据表<br>这里我们统筹用MigrationHelper管理<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">migrate</span><span class="params">(SQLiteDatabase db, Class&lt;? extends AbstractDao&lt;?, ?&gt;&gt;... daoClasses)</span> </span>&#123;</div><div class="line">    <span class="comment">// 1 新建临时表</span></div><div class="line">    generateTempTables(db, daoClasses);</div><div class="line">    <span class="comment">// 2 创建新表</span></div><div class="line">    createAllTables(db, <span class="keyword">false</span>, daoClasses);</div><div class="line">    <span class="comment">// 3 临时表数据写入新表，删除临时表</span></div><div class="line">    restoreData(db, daoClasses);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="step-1"><a href="#step-1" class="headerlink" title="step.1"></a>step.1</h3><p>将老的数据表重命名 **_TEMP<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">generateTempTables</span><span class="params">(SQLiteDatabase db, Class&lt;? extends AbstractDao&lt;?, ?&gt;&gt;... daoClasses)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; daoClasses.length; i++) &#123;</div><div class="line">        DaoConfig daoConfig = <span class="keyword">new</span> DaoConfig(db, daoClasses[i]);</div><div class="line">        String tableName = daoConfig.tablename;</div><div class="line">        <span class="keyword">if</span> (!checkTable(db, tableName))</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        String tempTableName = daoConfig.tablename.concat(<span class="string">"_TEMP"</span>);</div><div class="line">        StringBuilder insertTableStringBuilder = <span class="keyword">new</span> StringBuilder();</div><div class="line">        insertTableStringBuilder.append(<span class="string">"alter table "</span>)</div><div class="line">                .append(tableName)</div><div class="line">                .append(<span class="string">" rename to "</span>)</div><div class="line">                .append(tempTableName)</div><div class="line">                .append(<span class="string">";"</span>);</div><div class="line">        db.execSQL(insertTableStringBuilder.toString());</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">checkTable</span><span class="params">(SQLiteDatabase db, String tableName)</span> </span>&#123;</div><div class="line">    StringBuilder query = <span class="keyword">new</span> StringBuilder();</div><div class="line">    query.append(<span class="string">"SELECT count(*) FROM sqlite_master WHERE type='table' AND name='"</span>)</div><div class="line">            .append(tableName)</div><div class="line">            .append(<span class="string">"'"</span>);</div><div class="line">    Cursor c = db.rawQuery(query.toString(), <span class="keyword">null</span>);</div><div class="line">    <span class="keyword">if</span> (c.moveToNext()) &#123;</div><div class="line">        <span class="keyword">int</span> count = c.getInt(<span class="number">0</span>);</div><div class="line">        <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里从系统表 sqlite_master 里面查需要迁移数据的表是否存在</p>
<h3 id="step-2"><a href="#step-2" class="headerlink" title="step.2"></a>step.2</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">createAllTables</span><span class="params">(SQLiteDatabase db, <span class="keyword">boolean</span> ifNotExits, @NonNull Class&lt;? extends AbstractDao&lt;?, ?&gt;&gt;... daoClasses)</span> </span>&#123;</div><div class="line">    reflectMethod(db, <span class="string">"createTable"</span>, ifNotExits, daoClasses);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reflectMethod</span><span class="params">(SQLiteDatabase db, String methodName, <span class="keyword">boolean</span> isExists, Class&lt;? extends AbstractDao&lt;?, ?&gt;&gt;... daoClasses)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (daoClasses.length &lt; <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">for</span> (Class cls : daoClasses) &#123;</div><div class="line">            Method method = cls.getDeclaredMethod(methodName, SQLiteDatabase.class, <span class="keyword">boolean</span>.class);</div><div class="line">            method.invoke(<span class="keyword">null</span>, db, isExists);</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>由于父类AbstractDao不存在createTable这个方法，而是在每个子类的<em>*</em>Dao实现了createTable这个方法，所以这里我们采用反射来获得这个方法，来做建立新的表结构操作。</p>
<h3 id="step-3"><a href="#step-3" class="headerlink" title="step.3"></a>step.3</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">restoreData</span><span class="params">(SQLiteDatabase db, Class&lt;? extends AbstractDao&lt;?, ?&gt;&gt;... daoClasses)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; daoClasses.length; i++) &#123;</div><div class="line">        DaoConfig daoConfig = <span class="keyword">new</span> DaoConfig(db, daoClasses[i]);</div><div class="line">        String tableName = daoConfig.tablename;</div><div class="line">        String tempTableName = daoConfig.tablename.concat(<span class="string">"_TEMP"</span>);</div><div class="line">        <span class="keyword">if</span> (!checkTable(db,tempTableName))</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        List&lt;String&gt; columns = getColumns(db, tempTableName);</div><div class="line">        ArrayList&lt;String&gt; properties = <span class="keyword">new</span> ArrayList&lt;&gt;(columns.size());</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; daoConfig.properties.length; j++) &#123;</div><div class="line">            String columnName = daoConfig.properties[j].columnName;</div><div class="line">            <span class="keyword">if</span> (columns.contains(columnName)) &#123;</div><div class="line">                properties.add(columnName);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (properties.size() &gt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">final</span> String columnSQL = TextUtils.join(<span class="string">","</span>, properties);</div><div class="line">            StringBuilder insertTableStringBuilder = <span class="keyword">new</span> StringBuilder();</div><div class="line">            insertTableStringBuilder.append(<span class="string">"INSERT INTO "</span>)</div><div class="line">                    .append(tableName)</div><div class="line">                    .append(<span class="string">" ("</span>)</div><div class="line">                    .append(columnSQL)</div><div class="line">                    .append(<span class="string">") SELECT "</span>)</div><div class="line">                    .append(columnSQL)</div><div class="line">                    .append(<span class="string">" FROM "</span>)</div><div class="line">                    .append(tempTableName)</div><div class="line">                    .append(<span class="string">";"</span>);</div><div class="line"></div><div class="line">            db.execSQL(insertTableStringBuilder.toString());</div><div class="line">        &#125;</div><div class="line">        StringBuilder dropTableStringBuilder = <span class="keyword">new</span> StringBuilder();</div><div class="line">        dropTableStringBuilder.append(<span class="string">"DROP TABLE "</span>).append(tempTableName);</div><div class="line">        db.execSQL(dropTableStringBuilder.toString());</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">getColumns</span><span class="params">(SQLiteDatabase db, String tableName)</span> </span>&#123;</div><div class="line">    List&lt;String&gt; columns = <span class="keyword">null</span>;</div><div class="line">    Cursor cursor = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        cursor = db.rawQuery(<span class="string">"SELECT * FROM "</span> + tableName + <span class="string">" limit 0"</span>, <span class="keyword">null</span>);</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != cursor &amp;&amp; cursor.getColumnCount() &gt; <span class="number">0</span>) &#123;</div><div class="line">            columns = Arrays.asList(cursor.getColumnNames());</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        <span class="keyword">if</span> (cursor != <span class="keyword">null</span>)</div><div class="line">            cursor.close();</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == columns)</div><div class="line">            columns = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> columns;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里就是简单的从老表拿数据insert到新的表结构里面，这里可以根据具体项目来进行插入。</p>
]]></content>
      
        
        <tags>
            
            <tag> Android 第三方 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android 丢帧原理以及办法]]></title>
      <url>/2017/01/22/Android%20%E4%B8%A2%E5%B8%A7%E5%8E%9F%E7%90%86%E4%BB%A5%E5%8F%8A%E5%8A%9E%E6%B3%95/</url>
      <content type="html"><![CDATA[<h2 id="接近年底，想分享点儿东西给大家。"><a href="#接近年底，想分享点儿东西给大家。" class="headerlink" title="接近年底，想分享点儿东西给大家。"></a>接近年底，想分享点儿东西给大家。</h2><h2 id="Android-UI绘制过程"><a href="#Android-UI绘制过程" class="headerlink" title="Android UI绘制过程"></a>Android UI绘制过程</h2><p>开发中的卡顿我想没跟人都遇到过，之前也是搜博客看看怎么个解决办法，没有认真研究过，今天我打算跟大家聊一聊。</p>
<p>先从View 说吧。相信大家应该都知道View的绘制过程，measure，layout，draw。丢帧一定是在16ms内没有把这些事儿干完就对了，这里我们简单的分一下，主要是计算时间，以及绘图时间。</p>
<a id="more"></a>
<p>计算时间：这里的measure，layout的过程，都是会向下递归计算的，学过数据结构的话，应该知道，深搜的代价是很大的。所以尽量让树的高度降低，这里就引出扁平化布局。</p>
<p>绘图时间：这里需要着重讲一下，因为有时候这才是我们UI卡顿的主要原因。在这里我们要把android的试图看成是三维的，就像photoshop的图层一样。android在绘制的时候就会一层一层的“粉刷”，好了，那么造成卡顿，也就是丢帧，说白了最后没有在16ms内做完。好了，让我们剖析一下：</p>
<h3 id="invalidate-："><a href="#invalidate-：" class="headerlink" title="invalidate()："></a>invalidate()：</h3><p>我们知道invalidate 是用来请求View 重绘的</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Propagate the damage rectangle to the parent view.</span></div><div class="line"><span class="keyword">final</span> AttachInfo ai = mAttachInfo;</div><div class="line"><span class="keyword">final</span> ViewParent p = mParent;</div><div class="line"><span class="keyword">if</span> (p != <span class="keyword">null</span> &amp;&amp; ai != <span class="keyword">null</span> &amp;&amp; l &lt; r &amp;&amp; t &lt; b) &#123;</div><div class="line">    <span class="keyword">final</span> Rect damage = ai.mTmpInvalRect;</div><div class="line">    damage.set(l, t, r, b);</div><div class="line">    p.invalidateChild(<span class="keyword">this</span>, damage);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>invalidateInternal<br>这里可以看出来draw的过程其实就是拿到AttachInfo 里面包含着绘制信息，以及将绘制区域拿到，通过parent去绘制。让我们跟进去。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> ViewParent <span class="title">invalidateChildInParent</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span>[] location, <span class="keyword">final</span> Rect dirty)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> ((mPrivateFlags &amp; PFLAG_DRAWN) == PFLAG_DRAWN ||</div><div class="line">            (mPrivateFlags &amp; PFLAG_DRAWING_CACHE_VALID) == PFLAG_DRAWING_CACHE_VALID) &#123;</div><div class="line">        <span class="keyword">if</span> ((mGroupFlags &amp; (FLAG_OPTIMIZE_INVALIDATE | FLAG_ANIMATION_DONE)) !=</div><div class="line">                    FLAG_OPTIMIZE_INVALIDATE) &#123;</div><div class="line">            dirty.offset(location[CHILD_LEFT_INDEX] - mScrollX,</div><div class="line">                    location[CHILD_TOP_INDEX] - mScrollY);</div><div class="line">            <span class="keyword">if</span> ((mGroupFlags &amp; FLAG_CLIP_CHILDREN) == <span class="number">0</span>) &#123;</div><div class="line">                dirty.union(<span class="number">0</span>, <span class="number">0</span>, mRight - mLeft, mBottom - mTop);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> left = mLeft;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> top = mTop;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> ((mGroupFlags &amp; FLAG_CLIP_CHILDREN) == FLAG_CLIP_CHILDREN) &#123;</div><div class="line">                <span class="keyword">if</span> (!dirty.intersect(<span class="number">0</span>, <span class="number">0</span>, mRight - left, mBottom - top)) &#123;</div><div class="line">                    dirty.setEmpty();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            mPrivateFlags &amp;= ~PFLAG_DRAWING_CACHE_VALID;</div><div class="line"></div><div class="line">            location[CHILD_LEFT_INDEX] = left;</div><div class="line">            location[CHILD_TOP_INDEX] = top;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (mLayerType != LAYER_TYPE_NONE) &#123;</div><div class="line">                mPrivateFlags |= PFLAG_INVALIDATED;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">return</span> mParent;</div><div class="line"></div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            mPrivateFlags &amp;= ~PFLAG_DRAWN &amp; ~PFLAG_DRAWING_CACHE_VALID;</div><div class="line"></div><div class="line">            location[CHILD_LEFT_INDEX] = mLeft;</div><div class="line">            location[CHILD_TOP_INDEX] = mTop;</div><div class="line">            <span class="keyword">if</span> ((mGroupFlags &amp; FLAG_CLIP_CHILDREN) == FLAG_CLIP_CHILDREN) &#123;</div><div class="line">                dirty.set(<span class="number">0</span>, <span class="number">0</span>, mRight - mLeft, mBottom - mTop);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">// in case the dirty rect extends outside the bounds of this container</span></div><div class="line">                dirty.union(<span class="number">0</span>, <span class="number">0</span>, mRight - mLeft, mBottom - mTop);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (mLayerType != LAYER_TYPE_NONE) &#123;</div><div class="line">                mPrivateFlags |= PFLAG_INVALIDATED;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">return</span> mParent;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>invalidateChildInParent<br>这里的dirty代表你绘制的这块区域是否透明。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">invalidate</span><span class="params">()</span> </span>&#123;</div><div class="line">    mDirty.set(<span class="number">0</span>, <span class="number">0</span>, mWidth, mHeight);</div><div class="line">    <span class="keyword">if</span> (!mWillDrawSoon) &#123;</div><div class="line">        scheduleTraversals();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>invalidate<br>这里我们看到了个关键函数 scheduleTraversals ，为什么说神奇。我们看一下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">scheduleTraversals</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!mTraversalScheduled) &#123;</div><div class="line">        mTraversalScheduled = <span class="keyword">true</span>;</div><div class="line">        mTraversalBarrier = mHandler.getLooper().getQueue().postSyncBarrier();</div><div class="line">        mChoreographer.postCallback(</div><div class="line">                Choreographer.CALLBACK_TRAVERSAL, mTraversalRunnable, <span class="keyword">null</span>);</div><div class="line">        <span class="keyword">if</span> (!mUnbufferedInputDispatch) &#123;</div><div class="line">            scheduleConsumeBatchedInput();</div><div class="line">        &#125;</div><div class="line">        notifyRendererOfFramePending();</div><div class="line">        pokeDrawLockIfNeeded();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>scheduleTraversals<br>这里最重要的是Choreographer 这个，我们最终算出来的绘制信息都要通过它回调，开始他会注册一个广播用来接收时钟信息，然后他会在内部建立一个UI绘制队列：CallbackQueue，我们在外部CallBack的时候，会将我们的绘制信息作为CallbackRecord 然后会在接收到一个时钟信号的时候进行doFrame操作，并打印Traces信息，从而来绘制一帧。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">CallbackRecord</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> CallbackRecord next;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">long</span> dueTime;</div><div class="line">    <span class="keyword">public</span> Object action; <span class="comment">// Runnable or FrameCallback</span></div><div class="line">    <span class="keyword">public</span> Object token;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(<span class="keyword">long</span> frameTimeNanos)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (token == FRAME_CALLBACK_TOKEN) &#123;</div><div class="line">            ((FrameCallback)action).doFrame(frameTimeNanos);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            ((Runnable)action).run();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">CallbackQueue</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> CallbackRecord mHead;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasDueCallbacksLocked</span><span class="params">(<span class="keyword">long</span> now)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mHead != <span class="keyword">null</span> &amp;&amp; mHead.dueTime &lt;= now;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> CallbackRecord <span class="title">extractDueCallbacksLocked</span><span class="params">(<span class="keyword">long</span> now)</span> </span>&#123;</div><div class="line">        CallbackRecord callbacks = mHead;</div><div class="line">        <span class="keyword">if</span> (callbacks == <span class="keyword">null</span> || callbacks.dueTime &gt; now) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        CallbackRecord last = callbacks;</div><div class="line">        CallbackRecord next = last.next;</div><div class="line">        <span class="keyword">while</span> (next != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (next.dueTime &gt; now) &#123;</div><div class="line">                last.next = <span class="keyword">null</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            last = next;</div><div class="line">            next = next.next;</div><div class="line">        &#125;</div><div class="line">        mHead = next;</div><div class="line">        <span class="keyword">return</span> callbacks;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCallbackLocked</span><span class="params">(<span class="keyword">long</span> dueTime, Object action, Object token)</span> </span>&#123;</div><div class="line">        CallbackRecord callback = obtainCallbackLocked(dueTime, action, token);</div><div class="line">        CallbackRecord entry = mHead;</div><div class="line">        <span class="keyword">if</span> (entry == <span class="keyword">null</span>) &#123;</div><div class="line">            mHead = callback;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (dueTime &lt; entry.dueTime) &#123;</div><div class="line">            callback.next = entry;</div><div class="line">            mHead = callback;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span> (entry.next != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (dueTime &lt; entry.next.dueTime) &#123;</div><div class="line">                callback.next = entry.next;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            entry = entry.next;</div><div class="line">        &#125;</div><div class="line">        entry.next = callback;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeCallbacksLocked</span><span class="params">(Object action, Object token)</span> </span>&#123;</div><div class="line">        CallbackRecord predecessor = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">for</span> (CallbackRecord callback = mHead; callback != <span class="keyword">null</span>;) &#123;</div><div class="line">            <span class="keyword">final</span> CallbackRecord next = callback.next;</div><div class="line">            <span class="keyword">if</span> ((action == <span class="keyword">null</span> || callback.action == action)</div><div class="line">                    &amp;&amp; (token == <span class="keyword">null</span> || callback.token == token)) &#123;</div><div class="line">                <span class="keyword">if</span> (predecessor != <span class="keyword">null</span>) &#123;</div><div class="line">                    predecessor.next = next;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    mHead = next;</div><div class="line">                &#125;</div><div class="line">                recycleCallbackLocked(callback);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                predecessor = callback;</div><div class="line">            &#125;</div><div class="line">            callback = next;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>CallbackQueue and CallbackRecord</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">postCallbackDelayedInternal</span><span class="params">(<span class="keyword">int</span> callbackType,</span></span></div><div class="line">            Object action, Object token, <span class="keyword">long</span> delayMillis) &#123;</div><div class="line">    <span class="keyword">if</span> (DEBUG_FRAMES) &#123;</div><div class="line">        Log.d(TAG, <span class="string">"PostCallback: type="</span> + callbackType</div><div class="line">                + <span class="string">", action="</span> + action + <span class="string">", token="</span> + token</div><div class="line">                + <span class="string">", delayMillis="</span> + delayMillis);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">synchronized</span> (mLock) &#123;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">long</span> now = SystemClock.uptimeMillis();</div><div class="line">        <span class="keyword">final</span> <span class="keyword">long</span> dueTime = now + delayMillis;</div><div class="line">        mCallbackQueues[callbackType].addCallbackLocked(dueTime, action, token);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (dueTime &lt;= now) &#123;</div><div class="line">            scheduleFrameLocked(now);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            Message msg = mHandler.obtainMessage(MSG_DO_SCHEDULE_CALLBACK, action);</div><div class="line">            msg.arg1 = callbackType;</div><div class="line">            msg.setAsynchronous(<span class="keyword">true</span>);</div><div class="line">            mHandler.sendMessageAtTime(msg, dueTime);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>postCallbackDelayedInternal<br>可以看到这里我们把我们的绘制内容扔到队列里，等待轮训。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">FrameDisplayEventReceiver</span> <span class="keyword">extends</span> <span class="title">DisplayEventReceiver</span></span></div><div class="line">            <span class="keyword">implements</span> <span class="title">Runnable</span> &#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> mHavePendingVsync;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">long</span> mTimestampNanos;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mFrame;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FrameDisplayEventReceiver</span><span class="params">(Looper looper)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(looper);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onVsync</span><span class="params">(<span class="keyword">long</span> timestampNanos, <span class="keyword">int</span> builtInDisplayId, <span class="keyword">int</span> frame)</span> </span>&#123;</div><div class="line">        <span class="comment">// Ignore vsync from secondary display.</span></div><div class="line">        <span class="comment">// This can be problematic because the call to scheduleVsync() is a one-shot.</span></div><div class="line">        <span class="comment">// We need to ensure that we will still receive the vsync from the primary</span></div><div class="line">        <span class="comment">// display which is the one we really care about.  Ideally we should schedule</span></div><div class="line">        <span class="comment">// vsync for a particular display.</span></div><div class="line">        <span class="comment">// At this time Surface Flinger won't send us vsyncs for secondary displays</span></div><div class="line">        <span class="comment">// but that could change in the future so let's log a message to help us remember</span></div><div class="line">        <span class="comment">// that we need to fix this.</span></div><div class="line">        <span class="keyword">if</span> (builtInDisplayId != SurfaceControl.BUILT_IN_DISPLAY_ID_MAIN) &#123;</div><div class="line">            Log.d(TAG, <span class="string">"Received vsync from secondary display, but we don't support "</span></div><div class="line">                    + <span class="string">"this case yet.  Choreographer needs a way to explicitly request "</span></div><div class="line">                    + <span class="string">"vsync for a specific display to ensure it doesn't lose track "</span></div><div class="line">                    + <span class="string">"of its scheduled vsync."</span>);</div><div class="line">            scheduleVsync();</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Post the vsync event to the Handler.</span></div><div class="line">        <span class="comment">// The idea is to prevent incoming vsync events from completely starving</span></div><div class="line">        <span class="comment">// the message queue.  If there are no messages in the queue with timestamps</span></div><div class="line">        <span class="comment">// earlier than the frame time, then the vsync event will be processed immediately.</span></div><div class="line">        <span class="comment">// Otherwise, messages that predate the vsync event will be handled first.</span></div><div class="line">        <span class="keyword">long</span> now = System.nanoTime();</div><div class="line">        <span class="keyword">if</span> (timestampNanos &gt; now) &#123;</div><div class="line">            Log.w(TAG, <span class="string">"Frame time is "</span> + ((timestampNanos - now) * <span class="number">0.000001f</span>)</div><div class="line">                    + <span class="string">" ms in the future!  Check that graphics HAL is generating vsync "</span></div><div class="line">                    + <span class="string">"timestamps using the correct timebase."</span>);</div><div class="line">            timestampNanos = now;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (mHavePendingVsync) &#123;</div><div class="line">            Log.w(TAG, <span class="string">"Already have a pending vsync event.  There should only be "</span></div><div class="line">                    + <span class="string">"one at a time."</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            mHavePendingVsync = <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        mTimestampNanos = timestampNanos;</div><div class="line">        mFrame = frame;</div><div class="line">        Message msg = Message.obtain(mHandler, <span class="keyword">this</span>);</div><div class="line">        msg.setAsynchronous(<span class="keyword">true</span>);</div><div class="line">        mHandler.sendMessageAtTime(msg, timestampNanos / TimeUtils.NANOS_PER_MS);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        mHavePendingVsync = <span class="keyword">false</span>;</div><div class="line">        doFrame(mTimestampNanos, mFrame);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>FrameDisplayEventReceiver<br>接收时钟脉冲信号的广播，16ms一次，我们的目的就是在这个时钟脉冲里搞定整个 view</p>
<h3 id="Android-动画"><a href="#Android-动画" class="headerlink" title="Android 动画"></a>Android 动画</h3><p>Animator，ScrollTo，offsetLeftAndRight，这里面我们先单列这几项，都是同一个原理。这里我们可以大胆的猜想，一定是频繁执行我们的 Choreographer.CallBack 来绘制，因为只要在16ms内绘制成功，那就是流畅的动画。下面我们验证一下</p>
<p>ScrollTo:</p>
<p>我们先看一下 View 中这个方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scrollTo</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (mScrollX != x || mScrollY != y) &#123;</div><div class="line">        <span class="keyword">int</span> oldX = mScrollX;</div><div class="line">        <span class="keyword">int</span> oldY = mScrollY;</div><div class="line">        mScrollX = x;</div><div class="line">        mScrollY = y;</div><div class="line">        invalidateParentCaches();</div><div class="line">        onScrollChanged(mScrollX, mScrollY, oldX, oldY);</div><div class="line">        <span class="keyword">if</span> (!awakenScrollBars()) &#123;</div><div class="line">            postInvalidateOnAnimation();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>scrollTo<br>很简单，我们都可以看懂，开始位置，结束位置，这里我们重点关注 postInvalidateOnAnimation()  这个方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postInvalidateOnAnimation</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// We try only with the AttachInfo because there's no point in invalidating</span></div><div class="line">    <span class="comment">// if we are not attached to our window</span></div><div class="line">    <span class="keyword">final</span> AttachInfo attachInfo = mAttachInfo;</div><div class="line">    <span class="keyword">if</span> (attachInfo != <span class="keyword">null</span>) &#123;</div><div class="line">        attachInfo.mViewRootImpl.dispatchInvalidateOnAnimation(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>postInvalidateOnAnimation<br>我们可以看到，这里的动画过程绘制他还是扔到了ViewRootImpl 代理做这件事。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispatchInvalidateRectOnAnimation</span><span class="params">(AttachInfo.InvalidateInfo info)</span> </span>&#123;</div><div class="line">    mInvalidateOnAnimationRunnable.addViewRect(info);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>dispatchInvalidateOnAnimation<br>这里我们看到他开了个线程 mInvalidateOnAnimationRunnable 去添加我们这个将要绘制的 view，接下来我们继续庖丁解牛</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">InvalidateOnAnimationRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> mPosted;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ArrayList&lt;View&gt; mViews = <span class="keyword">new</span> ArrayList&lt;View&gt;();</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ArrayList&lt;AttachInfo.InvalidateInfo&gt; mViewRects =</div><div class="line">            <span class="keyword">new</span> ArrayList&lt;AttachInfo.InvalidateInfo&gt;();</div><div class="line">    <span class="keyword">private</span> View[] mTempViews;</div><div class="line">    <span class="keyword">private</span> AttachInfo.InvalidateInfo[] mTempViewRects;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addView</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">            mViews.add(view);</div><div class="line">            postIfNeededLocked();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewRect</span><span class="params">(AttachInfo.InvalidateInfo info)</span> </span>&#123;</div><div class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">            mViewRects.add(info);</div><div class="line">            postIfNeededLocked();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeView</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">            mViews.remove(view);</div><div class="line"></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = mViewRects.size(); i-- &gt; <span class="number">0</span>; ) &#123;</div><div class="line">                AttachInfo.InvalidateInfo info = mViewRects.get(i);</div><div class="line">                <span class="keyword">if</span> (info.target == view) &#123;</div><div class="line">                    mViewRects.remove(i);</div><div class="line">                    info.recycle();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (mPosted &amp;&amp; mViews.isEmpty() &amp;&amp; mViewRects.isEmpty()) &#123;</div><div class="line">                mChoreographer.removeCallbacks(Choreographer.CALLBACK_ANIMATION, <span class="keyword">this</span>, <span class="keyword">null</span>);</div><div class="line">                mPosted = <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> viewCount;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> viewRectCount;</div><div class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">            mPosted = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">            viewCount = mViews.size();</div><div class="line">            <span class="keyword">if</span> (viewCount != <span class="number">0</span>) &#123;</div><div class="line">                mTempViews = mViews.toArray(mTempViews != <span class="keyword">null</span></div><div class="line">                        ? mTempViews : <span class="keyword">new</span> View[viewCount]);</div><div class="line">                mViews.clear();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            viewRectCount = mViewRects.size();</div><div class="line">            <span class="keyword">if</span> (viewRectCount != <span class="number">0</span>) &#123;</div><div class="line">                mTempViewRects = mViewRects.toArray(mTempViewRects != <span class="keyword">null</span></div><div class="line">                        ? mTempViewRects : <span class="keyword">new</span> AttachInfo.InvalidateInfo[viewRectCount]);</div><div class="line">                mViewRects.clear();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; viewCount; i++) &#123;</div><div class="line">            mTempViews[i].invalidate();</div><div class="line">            mTempViews[i] = <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; viewRectCount; i++) &#123;</div><div class="line">            <span class="keyword">final</span> View.AttachInfo.InvalidateInfo info = mTempViewRects[i];</div><div class="line">            info.target.invalidate(info.left, info.top, info.right, info.bottom);</div><div class="line">            info.recycle();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">postIfNeededLocked</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!mPosted) &#123;</div><div class="line">            mChoreographer.postCallback(Choreographer.CALLBACK_ANIMATION, <span class="keyword">this</span>, <span class="keyword">null</span>);</div><div class="line">            mPosted = <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>InvalidateOnAnimationRunnable<br>终于，应了我们的猜想，ViewRootImpl 有一个专门执行动画绘制操作的线程，我们可以看到 run() 里面不断地CallBack，然后回收，当然里面有些线程锁啥的不涉及本文就不细说了。</p>
<h3 id="ValueAnimator："><a href="#ValueAnimator：" class="headerlink" title="ValueAnimator："></a>ValueAnimator：</h3><p>这里我们有个 AnimationHandler 来执行动画操作，这其中我们可以看到</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numAnims; ++i) &#123;</div><div class="line">    ValueAnimator anim = mTmpAnimations.get(i);</div><div class="line">    <span class="keyword">if</span> (mAnimations.contains(anim) &amp;&amp; anim.doAnimationFrame(frameTime)) &#123;</div><div class="line">        mEndingAnims.add(anim);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">mTmpAnimations.clear();</div></pre></td></tr></table></figure>
<p>doAnimationFrame<br>这里在不断循环我们所有的anim，并在不断执行 scheduleAnimation 方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">scheduleAnimation</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!mAnimationScheduled) &#123;</div><div class="line">        mChoreographer.postCallback(Choreographer.CALLBACK_ANIMATION, mAnimate, <span class="keyword">null</span>);</div><div class="line">        mAnimationScheduled = <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>scheduleAnimation<br>剩下的大家自己翻阅源码把。</p>
<p>这里总结一下。我们所有界面上视图的变化都是都是 ViewRootImpl 把需要重绘的东西填充 Choreographer 中的 mCallbackQueues 队列，然后在时钟脉冲的广播下进行轮训执行。</p>
<p>既然提到队列，假如我们在16ms内大量的填充 AttachInfo 之类的绘制OBJ，就会导致无法再一次时钟脉冲内绘制完毕，就会在造成丢帧，UI阻塞。</p>
<p>避免 Android UI 卡顿解决办法</p>
<p>解决办法：分析了好多，这里说两个方法。</p>
<p>1.避免重绘，这里避免图层（View）迭代。这里我们可以去开发者模式中对“显示GPU视图更新”打钩</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2710533-cade3554a7db68ee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Alt text"></p>
<p>过度绘制</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2710533-eb07b0f9a442d6f3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Alt text"></p>
<p>优化以后<br>这里引用 <a href="http://hukai.me/android-performance-render" target="_blank" rel="external">http://hukai.me/android-performance-render</a> 这篇博客的作者，盗个图。😂</p>
<p>这里可以进行，选择制定画布绘制，而不是整个view去绘制。可以在onDraw中进行限制，去限制绘制区域，例如</p>
<p>canvas.clipRect(100,100,350,600, Region.Op.INTERSECT);</p>
<p>2.扁平化布局，归根结底也是减少 mCallbackQueues 队列大小。保证尽量在16ms内绘制完毕，再有就是可以减少视图 ViewTree 的高度，减少时间复杂度，从而优化计算过程</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2710533-4c8e729db92f694a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Alt text"></p>
<p>xml代码</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2710533-0dbcc3353bd36d2f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Alt text"></p>
<p>优化后的xml代码<br>＊附：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2710533-5ddc05554c24d6d9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Alt text"></p>
<p>绘制层级<br>通过打开刚才说的开发者选项，来根据颜色来判断页面绘制情况。</p>
<p>距离回家还有8 个小时，17年希望可以发觉更多的东西给大家，并且希望大家可以积极指出文章中的错误。祝大家新年快乐！😄</p>
]]></content>
      
        
        <tags>
            
            <tag> Android 源码 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Dagger2体会]]></title>
      <url>/2016/08/11/Dagger2%E4%BD%93%E4%BC%9A/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近刚来我司，开始入手公司的项目，MVP，RxJava，Dagger2搭建的框架。对于我这个刚没多长时间的Android菜鸟，着实花了一段时间，说点儿题外话，最近研究了Java8，已经开始由命令式编程过度到函数式编程了，尤其是加了Lambda表达式，配起来RxJava的切换线程，异步操作爽呆了。</p>
<p>至于MVP，开始我是只知道MVC，但在看我司的项目架构的时候发现有差别，后来在简书上看到一个博主，醍醐灌顶，明白了MVP其实跟MVC是不一样的，就单单Model来说，在MVC中只是我们的一些javaBean，而在MVP它涉及到数据的来龙去脉，数据是来自内存，硬盘，还是网络。已经数据将会怎样存储都包含其中，至于MV的不同，请大家看<a href="https://hexo.io/" target="_blank" rel="external">MVP</a>。</p>
<p>接下来就是这篇博客的重点了，Dagger2，相信大家都或多或少用过或者听说过。让大家津津乐道的就是它的依赖注入，之前有瞭解过依赖注入，知道他最大的好处是解藕，大学时候没好好研究，今天我想说一下我的心得。<br><a id="more"></a></p>
<h2 id="几个疑问"><a href="#几个疑问" class="headerlink" title="几个疑问"></a>几个疑问</h2><h3 id="什么是解耦？"><a href="#什么是解耦？" class="headerlink" title="什么是解耦？"></a>什么是解耦？</h3><p>解耦就是松耦合，在我们开始学Java的时候new过各种事物，(PS世间万物皆对象)，但当工程变大，你的java文件过多，一旦需求妹妹过来跟你娇滴滴的说，构造函数加个参数呗，毕竟是妹子求，怎能不从，然后你开始昏天黑地的找，这种最直观的牵一发而动全身的体验就是耦合，很直观吧。官方的说法就是，在A中new B违反了单一职责原则，B 只能在A中new，违反了开闭原则。我们需要做的就是弱化这种关系。</p>
<h3 id="什么是依赖注入？"><a href="#什么是依赖注入？" class="headerlink" title="什么是依赖注入？"></a>什么是依赖注入？</h3><p>那么依赖注入这个思想是什么那，假设A需要B，我们要做的不是硬编码new B，而是通过一个工厂去生产它，你看到这一定蒙蔽了，工厂不也得new吗，讲道理，是这样，但你想，当你想改B的有参构造或是其他，你只需要改他的工厂。设计模式就是这样，你可能会感觉，好麻烦啊，我开始也是这样，觉得明明几行，为什么用了设计模式会这么多代码。担当开始接收项目，你会感觉自己的代码越写越难以维护，藕合度越高，最直观的感受，写的自己都心力交瘁，牵一发动全身，好了，回归正题，设想假如你在100个类里面new 了B，当B改变的时候你是不是要去一个个改，但是假如你只是修改他的工厂那就不用了，因为B 的源头是你在用到它的时候由工厂注入，无论是初始化加载，还是lazy加载，都一样。</p>
<p>其实依赖注入我们一定见过，这里聚一下例子：</p>
<h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</div><div class="line">    B b;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">A</span><span class="params">(B b)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.b = b;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="set方法注入"><a href="#set方法注入" class="headerlink" title="set方法注入"></a>set方法注入</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</div><div class="line">    B b;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setB</span><span class="params">(B b)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.b = b;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="接口注入"><a href="#接口注入" class="headerlink" title="接口注入"></a>接口注入</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">InjectInterface</span>() </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">InjectB</span><span class="params">(B b)</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">implements</span> <span class="title">InjectInterface</span> </span>&#123;</div><div class="line">    B b;</div><div class="line">    <span class="meta">@override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">InjectB</span><span class="params">(B b)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.b = b;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="注解方式-也是Dagger框架的主要方式"><a href="#注解方式-也是Dagger框架的主要方式" class="headerlink" title="注解方式(也是Dagger框架的主要方式)"></a>注解方式(也是Dagger框架的主要方式)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</div><div class="line">    <span class="meta">@Inject</span></div><div class="line">    B b;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="关于Dagger2的依赖注入？"><a href="#关于Dagger2的依赖注入？" class="headerlink" title="关于Dagger2的依赖注入？"></a>关于Dagger2的依赖注入？</h3><p>ok，我觉得他流弊的地方是设计思想。dagger的最终目的是依赖注入，是解耦，但是他的实现方法很流弊。接下来我们来聊一聊他的几个keywords: Inject，Component，Module，Provides，这里允许我盗一张图(ps: <a href="http://www.jianshu.com/p/cd2c1c9f68d4" target="_blank" rel="external">图的来源</a>, 这篇文章的作者就是上面的MVP的作者。非常感谢大哥，之前也详细解答了我很多)</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1504173-0b81f8a57768a703.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="关系图"></p>
<h4 id="Inject"><a href="#Inject" class="headerlink" title="Inject:"></a>Inject:</h4><p>两个作用:</p>
<p>1.标识哪里需要被注入。</p>
<p>2.标识哪里可以提供注入。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</div><div class="line">    <span class="comment">// 这里需要被注入</span></div><div class="line">    <span class="meta">@Inject</span></div><div class="line">    B b;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</div><div class="line">    <span class="comment">// 提供注入</span></div><div class="line">    <span class="meta">@Inject</span></div><div class="line">    B() &#123;</div><div class="line">      ...</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="Commponent"><a href="#Commponent" class="headerlink" title="Commponent"></a>Commponent</h4><p>字面理解就是主持人，它更像是我们的分发器。发负责得到B的实例，并去给被标识注入的地方进行注入。定点投放。正所谓来龙去脉知道，我们需要Commponent来实现这个注入过程。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</div><div class="line">    <span class="comment">// 提供注入</span></div><div class="line">    <span class="meta">@Inject</span></div><div class="line">    B() &#123;</div><div class="line">      ...</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</div><div class="line">    <span class="comment">// 这里我们需要找到找到B的实例进行注入，也就是需要Commponent来建立联系</span></div><div class="line">    <span class="meta">@Inject</span></div><div class="line">    B b;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@Commponent</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Commponent</span> </span>&#123;</div><div class="line">    <span class="comment">// 这就是让A，B发生联系的地方</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Inject</span><span class="params">(A a)</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 这里我们修改一下Class A</span></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</div><div class="line">    <span class="comment">// 这里我们需要找到找到B的实例进行注入，也就是需要Commponent来建立联系</span></div><div class="line">    <span class="meta">@Inject</span></div><div class="line">    B b;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">A</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// Dagger2 自动生成的组件用来注入，这样也就让A，B建立了联系</span></div><div class="line">        DaggerComponent.builder()</div><div class="line">                       .build()</div><div class="line">                       .inject(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h4><p>讲到这里，你会想，既然目标，来源都用Inject注解了，注入器Commponent也已经ok了，为何要用到Model，其实也很好理解，假如我们项目用第三方或者公司封装好的类库，你不可能指望你去打开它去修改，在你需要的位置加上Inject，这样的话，我们就可以用Model，将第三方我们需要的类暴露出来。Module其实是一个简单工厂模式，Module里面的方法基本都是创建类实例的方法。<br>还是上代码清晰一些:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Model</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</div><div class="line">    <span class="comment">// B 为我们第三方lib中的类</span></div><div class="line">    <span class="function">B <span class="title">ProduceB</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> B();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然而这样并没有完成，Model仅仅是创建实例的方法，我没还没有让他跟我的Component发生联系，我们需要Model可以跟我之前Inject需要注入的地方发生联系，接下来就引出来我下面的keyword: Provides</p>
<h4 id="Provides"><a href="#Provides" class="headerlink" title="Provides"></a>Provides</h4><p>接着我们上面的话题，不要停。上面说到我们需要让我的Model跟我们的Commponent建立联系，这样我们可以提供Provides标注我们需要的构造方法，这样就实现了我们的需求。是不是很神奇。然后我们简单改一下上面的代码。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Model</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</div><div class="line">    <span class="comment">// Provides来标注</span></div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="function">B <span class="title">ProduceB</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> B();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="关于Model，Inject优先级？"><a href="#关于Model，Inject优先级？" class="headerlink" title="关于Model，Inject优先级？"></a>关于Model，Inject优先级？</h3><p>这里Dagger2处理的优先级是：Model &gt; Inject<br>也就是在初始化构造的时候，Dagger2会先去查找Model有没有Provide我们需要的构造方法，假如没有，它会去查找Inject。</p>
<h3 id="关于有参无参的构造？"><a href="#关于有参无参的构造？" class="headerlink" title="关于有参无参的构造？"></a>关于有参无参的构造？</h3><p>无参直接就create这个类，有参就去查看@model的@Provide，然后再查 Inject 来构造我们这个类需要的有参构造的参数，过程中如果又发现还有需要构造参数的就继续查@model的@Provide  然后再查 Inject 以此类推。</p>
<h2 id="简单总结"><a href="#简单总结" class="headerlink" title="简单总结"></a>简单总结</h2><p>Dagger2的出现大大加快了Android的MVP模式的开发。而今天我说的是基础方面的，至于还有很多例如 Qualifier（限定符）、Singleton（单例）、Scope（作用域）、我会在接下来的Blog中进行分析，由衷地希望有看到这篇博客的童鞋，假如发现我的理解有问题，及时纠正我。</p>
<p>最后郑重声明，感谢<a href="http://www.jianshu.com/users/2ce7b74b592b/latest_articles" target="_blank" rel="external">牛大哥</a>.</p>
]]></content>
      
        
        <tags>
            
            <tag> Android 第三方 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
